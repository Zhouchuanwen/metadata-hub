"""
Collection of all available Queries
"""
type Query{
    """
    searchForFileMetadata:
    Searches for all file metadata dependent on the specified search options.
    If no options are specified, all file metadata is returned.

    Search Options:
    file_id: Only returns file metadata belonging to one of the file ids in the list.
    crawl_id: Only returns file metadata belonging to one of the crawl ids in the list.
    dir_path: Only returns file metadata where their directory path matches the specified pattern.
        Default PatternOption is "included".
    dir_path_option: Different PatternOptions can be used, which change how "dir_path" gets compared to other Strings.
    file_name: Only returns file metadata where their file_name matches the specified pattern.
        Default PatternOption is "included"
    file_name_option: Different PatternOptions can be used, which change how "file_name" gets compared to other Strings.
    file_type: Only returns file metadate where the file type is exactly "file_type"
    size: Only returns file metadata of a certain size depending on the used IntOption. Default IntOption is "equal".
    size_option: Here the IntOption for "size" can be specified.
    !Notice to timestamps!: timestamps follow the ISO 8601 standard, e.g. "2004-10-19 10:23:54+02", if no timezone is specified
        it is assumed to be in the system's timezone, if no time is specified "00:00:00" is used.
    start_creation_time: Only returns file metadata, which got created later or at the same point as "start_creation_time".
    end_creation_time: Only returns file metadata, which got created earlier than "end_creation_time".
    start_access_time: Only returns file metadata, which got accessed later or at the same point as "start_access_time".
    end_access_time: Only returns file metadata, which got accessed earlier than "end_access_time".
    start_modification_time: Only returns file metadata, which got modified later or at the same point as "start_modification_time".
    end_modification_time: Only returns file metadata, which got modified earlier than "end_modification_time".
    file_hash: Only returns file metadata where the file has the same sha_254 hash as the hashes in the list.
    metadata_attributes: (see in metadata_values)
    metadata_values: Only returns file metadata, where the file has the attribute specified in
        metadata_attributes and its value matches the value of metadata_values. Different PatternOptions can be used.
        Both lists have to be the same length as their ordering relates them to each other.
        Default PatternOption is "included".
    metadata_options: Different PatternOptions can be used for metadata_values. The index in metadata_option relates to the index
        in meta_data_values e.g. metadata_option[1] will be used for metadata_value[1]. If used both lists need to have the same length.
    metadata_filter_logic: A String that can specify how the used metadata filters should logically be used.
        All filters are applied [AND], one of the filters is applied [OR]. e.g. "( f5 AND f2 ) OR f1" [spaces are used as delimiter! e.g. (f1 AND f2) will throw an error]
        numbers correspond to the metadata list indexes (metadata_attributes, metadata_values)
    selected_attributes: For all file metadata only the specified metadata attributes are returned.
    limitFetchingSize: Limits how many files will get fetched by the search.
    showDeleted: if true, the query also returns metadata info about deleted files
    """
    searchForFileMetadata(file_ids: [Int!], crawl_ids: [Int!], dir_path: String, dir_path_option: MetadataOption,
        file_name: String, file_name_option: MetadataOption, file_type: String, size: Int, size_option: IntOption,
        start_creation_time: String, end_creation_time: String, start_access_time: String, end_access_time: String,
        start_modification_time: String, end_modification_time: String, file_hashes: [String!],
        metadata_attributes: [String!], metadata_values:[String!], metadata_options: [MetadataOption!],
        metadata_filter_logic: String,
        selected_attributes: [String!], limitFetchingSize: Int, showDeleted: Boolean) : [File]
}

"""
Different options for checking Strings for patterns:
included: the String has the pattern included
excluded: the String does not! have the pattern included
equal: the String has to exactly match the pattern
bigger: the String has to be lexicographically bigger than the pattern
smaller: the String has to be lexicogarphicaly smaller than the pattern
exists: the String is not NULL
"""
enum MetadataOption{
    included
    excluded
    equal
    bigger
    smaller
    exists
}

"""
Different options for checking int values:
equal: int value has to be equal to specified value
bigger: int value has to be bigger than specified value
smaller: int value has to be smaller than specified value
"""
enum IntOption{
    equal
    bigger
    smaller
}

type File{
    id: String!
    crawl_id: String!
    dir_path: String!
    name: String!
    type: String
    size: String
    metadata: [Metadatum!]!
    creation_time: String
    access_time: String
    modification_time: String
    file_hash: String
    deleted: Boolean
}

type Metadatum{
    name: String!
    value: String!
}

type Crawl{
    id: String!
    dir_path: String!
    name: String!
    status: String!
    crawl_config: String
    analyzed_dirs: String
    starting_time: String!
    finished_time: String
    update_time: String!
    analyzed_dirs_hash: String
}
